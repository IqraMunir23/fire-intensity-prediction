import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
data = pd.read_csv("Data_FRP.csv")

# Set style
sns.set(style="whitegrid", font_scale=1.2)

# Create subplots
fig, axes = plt.subplots(1, 2, figsize=(14, 6), dpi=150)

# Plot Max_FRP
sns.histplot(
    data["Max_FRP"], bins=60, kde=True, color="steelblue", edgecolor=None, ax=axes[0]
)
axes[0].set_title("(a) Distribution of Daily Max_FRP", fontsize=12)
axes[0].set_xlabel("Max_FRP (MW)", fontsize=11)
axes[0].set_ylabel("Frequency", fontsize=11)

# Plot Integrated_FRP
sns.histplot(
    data["Integrated_FRP"], bins=60, kde=True, color="darkgreen", edgecolor=None, ax=axes[1]
)
axes[1].set_title("(b) Distribution of Daily Integrated_FRP", fontsize=12)
axes[1].set_xlabel("Integrated_FRP (MW)", fontsize=11)
axes[1].set_ylabel("Frequency", fontsize=11)

# Final layout
plt.tight_layout()
plt.savefig("frp_distribution_dual_corrected.png", dpi=300)
plt.show()
# Show statistics as table
summary = df[['Max_FRP', 'Integrated_FRP']].describe().T
summary = summary.rename(columns={
    'mean': 'Mean', 'std': 'Std Dev', 'min': 'Min', '25%': 'Q1',
    '50%': 'Median', '75%': 'Q3', 'max': 'Max'
})

print("\n Basic Statistics:")
print(summary[['Mean', 'Std Dev', 'Min', 'Q1', 'Median', 'Q3', 'Max']])
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import pearsonr
from sklearn.preprocessing import LabelEncoder

# Load the dataset
file_path = "Data_FRP.csv"
data = pd.read_csv(file_path)

# Select numeric columns
columns_of_interest = [
    'Integrated_FRP', 'Max_FRP', 'Precipitation', 'Air_Temperature_Max', 'Air_Temperature_Mean', 'Wind_Speed',
    'Wind_Direction', 'Biomass', 'Solar_Radiance', 'Soil_Moisture', 'LST_Day_Max', 'LST_Day_Mean',
    'LST_Night_Max', 'LST_Night_Mean', 'Relative_Humidity', 'Recent_Humidity', 'MODIS_Burn_Area', 'Elevation',
    'Slope', 'Aspect', 'LAI', 'NDVI', 'EVI', 'SPEI', 'FMC_mean', 'FMC_max', 'FMC_min', 'Flam_max', 'Flam_mean',
    'Flam_min', 'Daily_KBDI', 'Month_KBDI', 'Year_KBDI', 'Prev_Freq', 'Prev_mir', 'Prev_tir', 'Prev_alb',
    'Forest_Type', 'LULC'
]
existing_columns = [col for col in columns_of_interest if col in data.columns]
filtered_data = data[existing_columns].copy()

# Encode categorical columns
for col in ['Forest_Type', 'LULC']:
    if col in filtered_data.columns:
        le = LabelEncoder()
        filtered_data[col] = le.fit_transform(filtered_data[col].astype(str))

# Fill missing values
filtered_data.fillna(filtered_data.mean(), inplace=True)

# Keep numeric only
numeric_data = filtered_data.select_dtypes(include=[np.number])

# Correlation + significance
def corr_with_significance(data):
    corr = data.corr()
    p_vals = pd.DataFrame(np.zeros_like(corr), columns=corr.columns, index=corr.index)
    for row in corr.index:
        for col in corr.columns:
            if row != col:
                try:
                    _, p_val = pearsonr(data[row], data[col])
                except:
                    p_val = np.nan
                p_vals.loc[row, col] = p_val
    return corr, p_vals

correlation_matrix, p_values = corr_with_significance(numeric_data)

# Mask for upper triangle
# Mask for upper triangle excluding diagonal
mask = np.triu(np.ones_like(correlation_matrix, dtype=bool), k=1)


# Significance markers
def significance_marker(p):
    if p < 0.001:
        return '***'
    elif p < 0.01:
        return '**'
    elif p < 0.05:
        return '*'
    else:
        return 'ns'

# Annotated matrix with correlation + p-value
annotated_matrix = pd.DataFrame('', index=correlation_matrix.index, columns=correlation_matrix.columns)
for row in correlation_matrix.index:
    for col in correlation_matrix.columns:
        if row != col:
            val = correlation_matrix.loc[row, col]
            p_val = p_values.loc[row, col]
            annotated_matrix.loc[row, col] = f"{val:.2f}\n{significance_marker(p_val)}"
        else:
            annotated_matrix.loc[row, col] = ""

# Plotting
plt.figure(figsize=(22, 20))
sns.set_theme(style="white")

heatmap = sns.heatmap(
    correlation_matrix,
    annot=annotated_matrix,
    fmt="",
    cmap="RdBu_r",
    vmin=-1, vmax=1,  # fixed scale range
    mask=mask,
    square=True,
    linewidths=0.5,
    annot_kws={"size": 11, "weight": "bold", "ha": "center", "va": "center"},
    cbar_kws={
        "label": "Pearson's Correlation",
        "shrink": 0.9,
        "orientation": "vertical"
    }
)

# Style
plt.title("Correlation Matrix - Australia", fontsize=20, weight="bold")
plt.xticks(rotation=45, ha='right', fontsize=11, weight="bold", fontname='Arial')
plt.yticks(rotation=0, fontsize=11, weight="bold", fontname='Arial')
heatmap.figure.axes[-1].tick_params(labelsize=11)

# Significance note
plt.gcf().text(
    0.5, 0.015,
    "ns: p â‰¥ 0.05   *: p < 0.05   **: p < 0.01   ***: p < 0.001",
    fontsize=13, ha="center", fontname='Arial'
)

# Save
plt.tight_layout(rect=[0, 0.03, 1, 0.97])
plt.savefig("correlation_matrix_final.png", dpi=300)
plt.show()

